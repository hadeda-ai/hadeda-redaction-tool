{"version":3,"sources":["utils/auth.js","utils/mutations.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/MovieCard.js","utils/queries.js","utils/helpers.js","utils/movieData.js","utils/API.js","pages/Homepage.js","pages/SearchMovies.js","pages/SavedMovies.js","components/Footer.js","components/Checkout.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","ADD_USER","gql","LOGIN_USER","ADD_MOVIE","LIKE_MOVIE","DISLIKE_MOVIE","SignupForm","useMutation","addUser","error","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","console","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","AppNavbar","showModal","setShowModal","Navbar","collapseOnSelect","expand","bg","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","loggedIn","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","Container","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","reducer","state","action","movies","movie","likedMovies","dislikedMovies","length","filter","dislikedMovie","_id","likedMovie","FantinderContext","createContext","Provider","FantinderProvider","initialState","props","useReducer","dispatch","useFantinderContext","useContext","MovieCard","displayTrailer","likeMovieHandler","dislikeMovieHandler","skipMovieHandler","displaySkip","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","isCurrentEventKey","Accordion","Card","trailer","ResponsiveEmbed","aspectRatio","title","width","height","src","frameBorder","allow","allowFullScreen","poster","Img","alt","Row","Col","sm","rating","numberOfStars","starDimension","starSpacing","Text","voteCount","toLocaleString","overview","releaseDate","likedUsers","Footer","some","GET_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","cleanMovieData","movieData","poster_path","i","cleanedData","externalMovieId","vote_average","vote_count","moment","release","format","movie_id","fetch","videoResponse","ok","json","videoResults","results","j","trailerKey","key","Homepage","movieIndex","setMovieIndex","addMovie","addMovieError","dislikeMovie","likeMovie","useQuery","loading","useEffect","me","then","isLiked","isDisliked","time_window","res","Error","forEach","input","newMovieData","newMovie","handleSkipMovie","Jumbotron","fluid","movieId","catch","SearchMovies","resultsFound","setResultsFound","searchInput","setSearchInput","searchedMovies","setSearchedMovies","searching","setSearching","response","cleanedMovies","updatedSearchedMovies","push","handleLikeMovie","handleDislikeMovie","CardColumns","map","SavedMovies","AppFooter","href","fetchCheckoutSession","quantity","headers","body","JSON","stringify","formatPrice","amount","currency","numberFormat","Intl","NumberFormat","style","currencyDisplay","parts","formatToParts","zeroDecimalCurrency","total","toFixed","payload","price","unitAmount","Checkout","stripe","publicKey","loadStripe","fetchConfig","handleClick","sessionId","redirectToCheckout","min","max","readOnly","role","message","client","ApolloClient","operation","setContext","authorization","uri","App","exact","path","component","Success","Canceled","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3f4c979f.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import gql from 'graphql-tag';\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!) {\n        addUser(username: $username, email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n                email\n            }\n        }\n    }\n`;\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n                email\n                likedMovies {\n                    _id\n                    externalMovieId\n                    title\n                    overview\n                    releaseDate\n                    rating\n                    voteCount\n                    poster\n                    trailer\n                }\n                dislikedMovies{\n                    _id\n                    externalMovieId\n                    title\n                    overview\n                    releaseDate\n                    rating\n                    voteCount\n                    poster\n                    trailer\n                }\n            }\n        }\n    }\n`;\n\nexport const ADD_MOVIE = gql`\n    mutation addMovie($input: MovieInput!) {\n        addMovie(input:$input) {\n            _id\n            externalMovieId\n            title\n            overview\n            releaseDate\n            rating\n            voteCount\n            poster\n            trailer\n            likedUsers {\n                _id\n                username\n            }\n            dislikedUsers {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const LIKE_MOVIE = gql`\n    mutation likeMovie($movieId: ID!) {\n        likeMovie(movieId: $movieId) {\n            likedMovies {\n                _id\n                externalMovieId\n                title\n                overview\n                releaseDate\n                rating\n                voteCount\n                poster\n                trailer\n            }\n            dislikedMovies{\n                _id\n                externalMovieId\n                title\n                overview\n                releaseDate\n                rating\n                voteCount\n                poster\n                trailer\n            }\n        }\n    }\n`;\n\nexport const DISLIKE_MOVIE = gql`\n    mutation dislikeMovie($movieId: ID!) {\n        dislikeMovie(movieId: $movieId) {\n            likedMovies {\n                _id\n                externalMovieId\n                title\n                overview\n                releaseDate\n                rating\n                voteCount\n                poster\n                trailer\n            }\n            dislikedMovies{\n                _id\n                externalMovieId\n                title\n                overview\n                releaseDate\n                rating\n                voteCount\n                poster\n                trailer\n            }\n        }\n    }\n`;","import React, { useState } from 'react';\nimport Auth from '../utils/auth';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst SignupForm = () => {\n    const [addUser, { error }] = useMutation(ADD_USER);\n    // set initial form state\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n    // set state for form validation\n    const [validated] = useState(false);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        try {\n            const { data } = await addUser({\n                variables: {...userFormData}\n            });\n\n            Auth.login(data.addUser.token);\n        } catch (e) {\n            console.error(e);\n            setShowAlert(true);\n        }\n\n        setUserFormData({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n    return (\n        <>\n            {/* This is needed for the validation functionality above */}\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                {/* show alert if server response is bad */}\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                    Something went wrong with your signup!\n                </Alert>\n\n                <Form.Group>\n                    <Form.Label htmlFor='username'>Username</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Your username'\n                        name='username'\n                        onChange={handleInputChange}\n                        value={userFormData.username}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='email'>Email</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Your email address'\n                        name='email'\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='password'>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Your password'\n                        name='password'\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n                {error && <div>Sign up failed</div>}\n            </Form>\n        </>\n    );\n};\n\nexport default SignupForm;","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport Auth from '../utils/auth';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst LoginForm = () => {\n    const [login, {error} ] = useMutation(LOGIN_USER);\n    const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n    const [validated] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({\n            ...userFormData,\n            [name]: value\n        });\n    };\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        try {\n            const { data } = await login({\n                variables: {...userFormData}\n            });\n            Auth.login(data.login.token);\n        } catch (e) {\n            console.error(e);\n            setShowAlert(true);\n        }\n\n        setUserFormData({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                    Something went wrong with your login credentials!\n                </Alert>\n                <Form.Group>\n                    <Form.Label htmlFor='email'>Email</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Your email'\n                        name='email'\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='password'>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Your password'\n                        name='password'\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.email && userFormData.password)}\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n                {error && <div>Login failed</div>}\n            </Form>\n        </>\n    );\n};\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport Auth from '../utils/auth';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nconst AppNavbar = () => {\n    // set modal display state\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <>\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"black\" variant=\"dark\">\n                <Navbar.Brand as={Link} to='/'>\n                    FANTINDER\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls='navbar' />\n                <Navbar.Collapse id='navbar'>\n                    <Nav className='ml-auto'>\n                        <Nav.Link as={Link} to='/search'>\n                            Search For Movies\n                        </Nav.Link>\n                        <Nav.Link as={Link} to='/checkout'>\n                            Donation\n                        </Nav.Link>\n                        {/* if user is logged in show saved movies and logout */}\n                        {Auth.loggedIn() ? (\n                            <>\n                                <Nav.Link as={Link} to='/saved'>\n                                    Saved Movies\n                                </Nav.Link>\n                                <Nav.Link onClick={Auth.logout}>\n                                    Logout\n                                </Nav.Link>\n                            </>\n                        ) : (\n                            <Nav.Link onClick={() => setShowModal(true)}>\n                                Login/Sign Up\n                            </Nav.Link>\n                        )}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            {/* set modal data up */}\n            <Modal\n                size='lg'\n                show={showModal}\n                onHide={() => setShowModal(false)}\n                aria-labelledby='signup-modal'>\n                {/* tab container to do either signup or login component */}\n                <Tab.Container defaultActiveKey='login'>\n                    <Modal.Header closeButton>\n                        <Modal.Title id='signup-modal'>\n                            <Nav variant='pills'>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='login'>Login</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Tab.Content>\n                            <Tab.Pane eventKey='login'>\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey='signup'>\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Modal.Body>\n                </Tab.Container>\n            </Modal>\n        </>\n    );\n};\n\nexport default AppNavbar;\n","import { useReducer } from 'react';\n\nimport { \n    ADD_TO_MOVIES,\n    UPDATE_MOVIES,\n    ADD_TO_DISLIKED_MOVIES,\n    ADD_TO_LIKED_MOVIES,\n    UPDATE_MOVIE_PREFERENCES\n }\nfrom '../utils/actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case ADD_TO_MOVIES:\n            return {\n                ...state,\n                movies: [...state.movies, action.movie]\n            }\n        case ADD_TO_LIKED_MOVIES:\n            return {\n                ...state,\n                likedMovies: [...state.likedMovies, action.movie],\n                dislikedMovies: state.dislikedMovies.length === 1 ? [] : state.dislikedMovies.filter(dislikedMovie => dislikedMovie._id !== action.movie._id),\n            }\n        case ADD_TO_DISLIKED_MOVIES:\n            return {\n                ...state,\n                likedMovies: state.likedMovies.length === 1 ? [] : state.likedMovies.filter(likedMovie => likedMovie._id !== action.movie._id),\n                dislikedMovies: [...state.dislikedMovies, action.movie],\n            }\n        case UPDATE_MOVIES:\n            return {\n                ...state,\n                movies: action.movies\n            }\n        case UPDATE_MOVIE_PREFERENCES:\n            return {\n                ...state,\n                dislikedMovies: action.dislikedMovies,\n                likedMovies: action.likedMovies\n            }\n        default:\n            return state ? state : '';\n    }\n};\n\nexport function useMovieReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","export const ADD_TO_MOVIES = \"ADD_TO_MOVIES\";\nexport const UPDATE_MOVIES = \"UPDATE_MOVIES\";\nexport const ADD_TO_DISLIKED_MOVIES = \"ADD_TO_DISLIKED_MOVIES\";\nexport const ADD_TO_LIKED_MOVIES = \"ADD_TO_LIKED_MOVIES\";\nexport const UPDATE_MOVIE_PREFERENCES = \"UPDATE_MOVIE_PREFERENCES\";\n","import React, { createContext, useContext } from \"react\";\nimport { useMovieReducer } from './reducers';\n\nconst FantinderContext = createContext();\nconst { Provider } = FantinderContext;\n\nconst FantinderProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useMovieReducer({\n      likedMovies: [],  // array of movies that were liked\n      dislikedMovies: [],  // array of movies that were disliked\n      movies: []  // array of all movies\n    });\n    // console.log({state}); // comment this in to test!\n    return <Provider value={[state, dispatch]} {...props} />;\n  };\n\nconst useFantinderContext = () => {\n    return useContext(FantinderContext);\n};\n\nexport { FantinderProvider, useFantinderContext };\n","import React, { useContext } from 'react';\n\n// import bootstrap-react components\nimport { Accordion, AccordionContext, Button, Card, ResponsiveEmbed, Row, Col } from 'react-bootstrap';\nimport StarRatings from 'react-star-ratings';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\n// import utils\nimport Auth from '../utils/auth';\nimport { useFantinderContext } from \"../utils/GlobalState\";\n\nconst MovieCard = (props) => {\n    const [state, ] = useFantinderContext();\n    const { likedMovies, dislikedMovies } = state;\n    const {\n        movie,\n        displayTrailer,\n        likeMovieHandler,\n        dislikeMovieHandler,\n        skipMovieHandler,\n        displaySkip\n    } = props;\n\n    function ContextAwareToggle({ eventKey, callback }) {\n        const currentEventKey = useContext(AccordionContext);\n    \n        const decoratedOnClick = useAccordionToggle(\n            eventKey,\n            () => callback && callback(eventKey),\n        );\n    \n        const isCurrentEventKey = currentEventKey === eventKey;\n      \n        return (\n            <Button\n                variant=\"link\"\n                className={`link ${isCurrentEventKey ? 'text-muted' : '' }`}\n                onClick={decoratedOnClick}\n            >\n                {isCurrentEventKey\n                ?   <span className=\"small\">Collapse <i className=\"fas fa-chevron-up\"></i></span>\n                :   <span className=\"small\">Click for details <i className=\"fas fa-chevron-down\"></i></span>\n                }\n            </Button>\n        );\n    }      \n\n    return (\n        movie\n        ?   <Accordion>\n            <Card>\n                {displayTrailer && movie.trailer\n                    ? <ResponsiveEmbed aspectRatio=\"16by9\">\n                        <iframe\n                            title={movie._id}\n                            width=\"560\"\n                            height=\"315\"\n                            src={movie.trailer}\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen></iframe>\n                    </ResponsiveEmbed>\n                    : (movie.poster && <Card.Img src={movie.poster} alt={`The cover for ${movie.title}`} variant='top' />)\n                }\n                <Card.Body>\n                    <Card.Title>\n                        {movie.title}\n                    </Card.Title>\n                    <Row>\n                        <Col sm={6}>\n                            { movie.rating >= 0\n                            ?   <StarRatings\n                                    rating={movie.rating/2}\n                                    numberOfStars={5}\n                                    name={`${movie._id}-rating`}\n                                    starDimension=\"20px\"\n                                    starSpacing=\"1px\"\n                                />\n                            :   null\n                            }\n                            <Card.Text className=\"small\">\n                            ({movie.voteCount?.toLocaleString()} ratings)\n                            </Card.Text>\n                        </Col>\n                        <Col className=\"text-right\">\n                            <ContextAwareToggle eventKey={movie._id} />\n                        </Col>\n                    </Row>\n                </Card.Body>\n                    <Accordion.Collapse eventKey={movie._id}>\n                        <Card.Body>\n                            <Card.Text>Plot Summary</Card.Text>\n                            <Card.Text className='small'>{movie.overview}</Card.Text>\n                            <Card.Text className='small'>Release Date: {movie.releaseDate}</Card.Text>\n                            <Card.Text className='small'>{`${movie.likedUsers.length} users liked this movie`}</Card.Text>\n                        </Card.Body>\n                    </Accordion.Collapse>\n\n                {Auth.loggedIn()\n                ?   <Card.Footer className=\"d-flex justify-content-between\">\n                        <Button\n                            className=\"movie-card-button\"\n                            disabled={dislikedMovies?.some(dislikedMovie => dislikedMovie._id === movie._id)}\n                            variant={dislikedMovies?.some(dislikedMovie => dislikedMovie._id === movie._id) ? \"outline-secondary\" : \"outline-danger\"}\n                            onClick={() => dislikeMovieHandler(movie)}>\n                                {dislikedMovies?.some(dislikedMovie => dislikedMovie._id === movie._id)\n                                ? <span>Disliked!</span>\n                                : <i className='far fa-thumbs-down fa-2x' />}\n                        </Button>\n                        <Button\n                            className=\"movie-card-button\"\n                            disabled={likedMovies?.some(likedMovie => likedMovie._id === movie._id)}\n                            variant={likedMovies?.some(likedMovie => likedMovie._id === movie._id) ? \"outline-secondary\" : \"outline-success\"}\n                            onClick={() => likeMovieHandler(movie)}>\n                                {likedMovies?.some(likedMovie => likedMovie._id === movie._id)\n                                ? <span>Liked!</span>\n                                : <i className='far fa-thumbs-up fa-2x' />}\n                        </Button>\n                    </Card.Footer>\n                :   displaySkip &&\n                        <Card.Footer className=\"text-center\">\n                            <Button\n                                className=\"movie-card-button\"\n                                size=\"lg\"\n                                onClick={skipMovieHandler}>\n                                    Next Movie\n                            </Button>\n                        </Card.Footer>\n                }\n                </Card>\n            </Accordion>\n        :   null\n    )\n}\n\nexport default MovieCard;","import gql from 'graphql-tag';\n\nexport const GET_USER = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friends {\n        _id\n      }\n      likedMovies{\n        _id\n        externalMovieId\n        rating\n        voteCount\n        title\n        overview\n        releaseDate\n        poster\n        trailer\n        likedUsers {\n          _id\n          username\n        }\n        dislikedUsers {\n          _id\n          username\n        }\n      }\n      dislikedMovies{\n        _id\n        externalMovieId\n        rating\n        voteCount\n        title\n        overview\n        releaseDate\n        poster\n        trailer\n        likedUsers {\n          _id\n          username\n        }\n        dislikedUsers {\n          _id\n          username\n        }\n      }\n    }\n  }\n`;","  \nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `fantinder` with the version of 1\n    const request = window.indexedDB.open('fantinder', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('dislikedMovies', { keyPath: '_id' });\n      db.createObjectStore('likedMovies', { keyPath: '_id' });\n      db.createObjectStore('movies', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}","import { getVideos } from '../utils/API';\nimport moment from 'moment';\n\nexport const cleanMovieData = async (movieData) => {\n    // filter out entries that won't display well\n    const movies = movieData.filter((movie) => movie.poster_path && movie.overview);\n    \n    // clean up the data\n    for (let i=0; i < movies.length; i++) {\n        const movie = await movies[i]\n\n        let cleanedData = {\n            externalMovieId: movie.id,\n            rating: movie.vote_average,\n            voteCount: movie.vote_count,\n            title: movie.title,\n            overview: movie.overview,\n            releaseDate: moment(movie.release).format('LL'),\n            poster: 'https://image.tmdb.org/t/p/w500' + movie.poster_path\n        }\n\n        // try to get the trailer\n        try {\n            const videoResponse = await getVideos(movie.id);\n\n            // if the response was ok, handle the trailer info\n            if (videoResponse.ok) {\n                const {results: videoResults} = await videoResponse.json();\n\n                // return first video that's a trailer\n                for (let j=0; j < videoResults.length; j++) {\n                    if (videoResults[j].type === 'Trailer') {\n                        const trailerKey = videoResults[j].key;\n                        cleanedData.trailer = `https://www.youtube.com/embed/${trailerKey}`;\n                        break\n                    }\n                }\n            }\n        } catch(err) {\n            console.log(err);\n        }\n\n        // save the cleaned data\n        movies[i] = cleanedData;\n    }\n\n    return movies;\n}","// Using https://www.themoviedb.org/ for movies api\nexport const searchTMDB = (query) => {\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=d64da0474db9594724886e71c0d202f1&query=${query}`);\n};\n\nexport const getVideos = (movie_id) => {\n    return fetch(`https://api.themoviedb.org/3/movie/${movie_id}/videos?api_key=d64da0474db9594724886e71c0d202f1&language=en-US`)\n};\n\n// time_window can be by day or week\nexport const getTrendingMovies = (time_window) => {\n    return fetch(`https://api.themoviedb.org/3/trending/movie/${time_window}?api_key=d64da0474db9594724886e71c0d202f1`);\n};\n\n// category can be top_rated, latest, popular\nexport const getMovies = (category) => {\n    return fetch(`https://api.themoviedb.org/3/movie/${category}?api_key=d64da0474db9594724886e71c0d202f1&language=en-US`);\n};","import React, { useEffect, useState } from 'react';\n// Components\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport MovieCard from '../components/MovieCard';\n// TMDB API\nimport { getTrendingMovies } from '../utils/API';\n// GraphQL\nimport { ADD_MOVIE, DISLIKE_MOVIE, LIKE_MOVIE } from '../utils/mutations';\nimport { GET_USER } from '../utils/queries';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n// Global State\nimport { useFantinderContext } from \"../utils/GlobalState\";\nimport {\n    ADD_TO_MOVIES,\n    ADD_TO_DISLIKED_MOVIES,\n    ADD_TO_LIKED_MOVIES,\n    UPDATE_MOVIE_PREFERENCES,\n    UPDATE_MOVIES\n} from '../utils/actions';\n// IndexedDB\nimport { idbPromise } from \"../utils/helpers\";\nimport { cleanMovieData } from '../utils/movieData';\n// Other Utils\nimport Auth from '../utils/auth';\n\nconst Homepage = () => {\n    const [state, dispatch] = useFantinderContext();\n    const { movies, likedMovies, dislikedMovies } = state\n    const [movieIndex, setMovieIndex] = useState('');\n    // GraphQL\n    const [addMovie, { addMovieError }] = useMutation(ADD_MOVIE);\n    const [dislikeMovie] = useMutation(DISLIKE_MOVIE);\n    const [likeMovie] = useMutation(LIKE_MOVIE);\n    const { loading, data } = useQuery(GET_USER);\n\n    // hook for updating movie preferences\n    useEffect(() => {\n        // if we're online, use server to update movie preferences\n        if (!likedMovies.length && !dislikedMovies.length) {\n            if (data && data.me) {\n                if (data.me.likedMovies.length || !data.me.dislikedMovies.length) {\n                    console.log(\"Online, using data from server to update movie preferences\")\n                    dispatch({\n                        type: UPDATE_MOVIE_PREFERENCES,\n                        likedMovies: data.me.likedMovies,\n                        dislikedMovies: data.me.dislikedMovies\n                    });\n                }\n            }\n            // if we're offline, use idb to update movie preferences\n            else if (!loading) {\n                idbPromise('likedMovies', 'get').then(likedMovies => {\n                    idbPromise('dislikedMovies', 'get').then(dislikedMovies => {\n                        if (dislikedMovies.length || likedMovies.length) {\n                            console.log(\"Offline, using data from idb to update movie preferences\")\n                            dispatch({\n                                type: UPDATE_MOVIE_PREFERENCES,\n                                likedMovies,\n                                dislikedMovies\n                            })\n                        }\n                    })\n                })\n            }\n        }\n    }, [data, loading, likedMovies, dislikedMovies, dispatch])\n\n    // hook for displaying a movie\n    useEffect(() => {\n        if (movies.length && movieIndex === '') {// show the next movie\n            console.log('There are movies, but no movieIndex. Setting movieIndex')\n            for (let i=0; i < movies.length; i++) {\n                const isLiked = likedMovies.some(likedMovie => likedMovie._id === movies[i]._id);\n                const isDisliked = dislikedMovies.some(dislikedMovie => dislikedMovie._id === movies[i]._id);\n\n                if (!isLiked && !isDisliked && movies[i].trailer) {\n                    setMovieIndex(i);\n                    break;\n                }\n            }\n        }\n    }, [setMovieIndex, dislikedMovies, likedMovies, movies, movieIndex]);\n\n    // hook for getting the movies\n    useEffect(() => {\n        if (!movies.length) {\n            // if we're online, ping the API to get our movie preferences\n            try {\n                console.log(\"Pinging TMDB API to get trending movies\");\n                getTrendingMovies('week').then(res => {\n                    if (res.ok) {\n                        res.json().then(async ({ results }) => {\n                            // clean the data to match our MovieSchema\n                            const cleanedMovieData = await cleanMovieData(results);\n                            cleanedMovieData.forEach(async movie => {\n                                // add the movie to the db\n                                const result = await addMovie({ variables: { input: movie } })\n\n                                if (addMovieError) {\n                                    throw new Error(\"Couldn't add movie\");\n                                }\n\n                                const { data: newMovieData } = await result;\n                                const { addMovie : newMovie } = await newMovieData;\n\n                                // add the movie to the global store\n                                dispatch({\n                                    type: ADD_TO_MOVIES,\n                                    movie: newMovie\n                                })\n\n                                // add to idb\n                                idbPromise('movies', 'put', newMovie);\n                            })\n                        })\n                    }\n                    else {\n                        throw new Error (\"Couldn't load trending movies\");\n                    }\n                })\n            }\n            // if we can't load from TMDB, try getting them from idb\n            catch {\n                console.log(\"Couldn't get data from TMDB API. Using IDB to display movies.\");\n\n                idbPromise('movies', 'get').then(movies => {\n                    if (movies.length) {\n                        console.log('Using IDB to get trending movies');\n                        dispatch({\n                            type: UPDATE_MOVIES,\n                            movies\n                        })\n                    }\n                })\n            }\n        }\n    }, [movies, data, dispatch, loading, addMovie, addMovieError])\n\n    const handleLikeMovie = (likedMovie) => {\n        // update the db\n        likeMovie({\n            variables: { movieId: likedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_LIKED_MOVIES,\n                    movie: likedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'put', likedMovie);\n                idbPromise('dislikedMovies', 'delete', likedMovie);\n\n                // skip to the next movie\n                handleSkipMovie();\n            } else {\n                console.error(\"Couldn't like the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    const handleDislikeMovie = (dislikedMovie) => {\n        // update the db\n        dislikeMovie({\n            variables: { movieId: dislikedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_DISLIKED_MOVIES,\n                    movie: dislikedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'delete', dislikedMovie);\n                idbPromise('dislikedMovies', 'put', dislikedMovie);\n\n                // skip to the next movie\n                handleSkipMovie();\n            } else {\n                console.error(\"Couldn't dislike the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    const handleSkipMovie = async () => {\n        // put the current movie at the end of the array if it's not the only movie\n        if (movies.length) {\n            for (let i=movieIndex + 1; i < movies.length; i++) {\n                const isLiked = likedMovies.some(likedMovie => likedMovie._id === movies[i]._id);\n                const isDisliked = dislikedMovies.some(dislikedMovie => dislikedMovie._id === movies[i]._id);\n\n                if (!isLiked && !isDisliked && movies[i].trailer) {\n                    setMovieIndex(i);\n                    break;\n                }\n            }\n        }\n        // if this is the only movie left, set moviesToDisplay to an empty array.\n        else {\n            setMovieIndex('')\n        }\n    }\n    \n    return(\n        <>\n            <Jumbotron fluid className=\"text-light bg-dark\">\n                <Container>\n                    <h1>Welcome to FANTINDER!</h1>\n                    {Auth.loggedIn()\n                        ? <h4>Click thumbs up to like and save a movie, thumbs down to pass.</h4>\n                        : <h4>Check out our recommended movies below.</h4>\n                    }\n                </Container>\n            </Jumbotron>\n\n            <Container>\n                {loading ? <h2>Loading....</h2> : null}\n                {movies.length\n                ?   <MovieCard\n                        movie={movies[movieIndex]}\n                        displayTrailer\n                        displaySkip\n                        likeMovieHandler={handleLikeMovie}\n                        dislikeMovieHandler={handleDislikeMovie}\n                        skipMovieHandler={handleSkipMovie}\n                    />\n                :  null\n                }\n            </Container>\n        </>\n    );\n}\n\nexport default Homepage;","import React, { useEffect, useState } from 'react';\n// Components\nimport { Form, Button, CardColumns, Container, Jumbotron } from 'react-bootstrap';\nimport MovieCard from '../components/MovieCard'\nimport { cleanMovieData } from '../utils/movieData';\n// TMDB API\nimport { searchTMDB } from '../utils/API';\n// GraphQL\nimport { ADD_MOVIE, DISLIKE_MOVIE, LIKE_MOVIE } from '../utils/mutations';\nimport { GET_USER } from '../utils/queries';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n// Global State\nimport { useFantinderContext } from \"../utils/GlobalState\";\nimport {\n    ADD_TO_DISLIKED_MOVIES,\n    ADD_TO_LIKED_MOVIES,\n    UPDATE_MOVIE_PREFERENCES\n} from '../utils/actions';\n// IndexedDB\nimport { idbPromise } from \"../utils/helpers\";\n\nconst SearchMovies = () => {\n    // State\n    const [state, dispatch] = useFantinderContext();\n    const { likedMovies, dislikedMovies } = state\n    const [resultsFound, setResultsFound] = useState(true);\n    const [searchInput, setSearchInput] = useState('');\n    const [searchedMovies, setSearchedMovies] = useState([]);\n    const [searching, setSearching] = useState(false);\n    // GraphQL\n    const [addMovie, { addMovieError }] = useMutation(ADD_MOVIE);\n    const [dislikeMovie] = useMutation(DISLIKE_MOVIE);\n    const [likeMovie] = useMutation(LIKE_MOVIE);\n    const { loading, data } = useQuery(GET_USER);\n\n    // hook for updating movie preferences\n    useEffect(() => {\n        // if we're online, use server to update movie preferences\n        if (!likedMovies.length && !dislikedMovies.length) {\n            if (data && data.me) {\n                if (data.me.likedMovies.length || !data.me.dislikedMovies.length) {\n                    console.log(\"Online, using data from server to update movie preferences\")\n                    dispatch({\n                        type: UPDATE_MOVIE_PREFERENCES,\n                        likedMovies: data.me.likedMovies,\n                        dislikedMovies: data.me.dislikedMovies\n                    });\n                }\n            }\n            // if we're offline, use idb to update movie preferences\n            else if (!loading) {\n                idbPromise('likedMovies', 'get').then(likedMovies => {\n                    idbPromise('dislikedMovies', 'get').then(dislikedMovies => {\n                        if (dislikedMovies.length || likedMovies.length) {\n                            console.log(\"Offline, using data from idb to update movie preferences\")\n                            dispatch({\n                                type: UPDATE_MOVIE_PREFERENCES,\n                                likedMovies,\n                                dislikedMovies\n                            })\n                        }\n                    })\n                })\n            }\n        }\n    }, [data, loading, likedMovies, dislikedMovies, dispatch])\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        setSearchedMovies([]);\n        setSearching(true);\n\n        if (!searchInput) {\n            return false;\n        }\n\n        const response = await searchTMDB(searchInput);\n\n        if (!response.ok) {\n            throw new Error(\"Couldn't search for movies\");\n        }\n\n        const { results } = await response.json();\n\n        // return early if no results found\n        if (results.length === 0) {\n            setResultsFound(false);\n            setSearching(false);\n            return;\n        }\n\n        const cleanedMovies = await cleanMovieData(results);\n\n        const updatedSearchedMovies = [];\n        for (let i=0; i < cleanedMovies.length; i++) {\n\n            // add the movie to the DB\n            const { data } = await addMovie({\n                variables: { input: cleanedMovies[i] }\n            })\n\n            // update searchedMovies state\n            if (!addMovieError) {\n                updatedSearchedMovies.push(data.addMovie);\n            }\n        };\n\n        setSearchedMovies(updatedSearchedMovies);\n        setSearching(false);\n        setResultsFound(true);\n    };\n\n    const handleLikeMovie = (likedMovie) => {\n        // update the db\n        likeMovie({\n            variables: { movieId: likedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_LIKED_MOVIES,\n                    movie: likedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'put', likedMovie);\n                idbPromise('dislikedMovies', 'delete', likedMovie);\n\n            } else {\n                console.error(\"Couldn't like the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    const handleDislikeMovie = (dislikedMovie) => {\n        // update the db\n        dislikeMovie({\n            variables: { movieId: dislikedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_DISLIKED_MOVIES,\n                    movie: dislikedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'delete', dislikedMovie);\n                idbPromise('dislikedMovies', 'put', dislikedMovie);\n\n            } else {\n                console.error(\"Couldn't dislike the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    return (\n        <>\n            <Jumbotron fluid className=\"text-light bg-dark\">\n                <Container>\n                    <Form onSubmit={(event) => handleFormSubmit(event, searchInput)}>\n                        <Form.Label className=\"h3\">Find your favorite movies</Form.Label>\n                        <Form.Control\n                            name='searchInput'\n                            value={searchInput}\n                            onChange={(e) => setSearchInput(e.target.value)}\n                            type='text'\n                            placeholder='The Lord of the Rings'\n                        />\n                        <Button type='submit' className=\"mt-2\">Search</Button>\n                    </Form>\n                </Container>\n            </Jumbotron>\n            <Container>\n                {!searching && !resultsFound\n                    ?   <h2 className=\"results-heading\">No movies found! Please try another search.</h2>\n                    :   <>\n                            <h2 className=\"results-heading\">\n                                {searchedMovies.length > 0 && `Viewing ${searchedMovies.length} results:`}\n                            </h2>\n                            <CardColumns>\n                                {searchedMovies?.map(movie => {\n                                    return (\n                                        <MovieCard\n                                            key={movie._id}\n                                            movie={movie}\n                                            displayTrailer\n                                            likeMovieHandler={handleLikeMovie}\n                                            dislikeMovieHandler={handleDislikeMovie}\n                                        />\n                                    )\n                                })}\n                            </CardColumns>\n                        </>\n                }\n            </Container>\n        </>\n    );\n};\n\nexport default SearchMovies;","import React, { useEffect } from 'react';\n// Components\nimport { Jumbotron, CardColumns, Container } from 'react-bootstrap';\nimport MovieCard from '../components/MovieCard';\n// GraphQL\nimport { DISLIKE_MOVIE, LIKE_MOVIE } from '../utils/mutations';\nimport { GET_USER } from '../utils/queries';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n// Global State\nimport { useFantinderContext } from \"../utils/GlobalState\";\nimport { \n    ADD_TO_DISLIKED_MOVIES,\n    ADD_TO_LIKED_MOVIES,\n    UPDATE_MOVIE_PREFERENCES\n} from '../utils/actions';\n// IDB\nimport { idbPromise } from \"../utils/helpers\";\n\nconst SavedMovies = () => {\n    // State\n    const [state, dispatch] = useFantinderContext();\n    const { likedMovies, dislikedMovies } = state;\n    // GraphQL\n    const [dislikeMovie] = useMutation(DISLIKE_MOVIE);\n    const [likeMovie] = useMutation(LIKE_MOVIE);\n    const { loading, data } = useQuery(GET_USER);\n\n    useEffect(() => {\n        // if we're online, use server to update movie preferences\n        if (!likedMovies.length && !dislikedMovies.length) {\n            if (data && data.me) {\n                if (data.me.likedMovies.length || !data.me.dislikedMovies.length) {\n                    console.log(\"Online, using data from server to update movie preferences\")\n                    dispatch({\n                        type: UPDATE_MOVIE_PREFERENCES,\n                        likedMovies: data.me.likedMovies,\n                        dislikedMovies: data.me.dislikedMovies\n                    });\n                }\n            }\n            // if we're offline, use idb to update movie preferences\n            else if (!loading) {\n                idbPromise('likedMovies', 'get').then(likedMovies => {\n                    idbPromise('dislikedMovies', 'get').then(dislikedMovies => {\n                        if (dislikedMovies.length || likedMovies.length) {\n                            console.log(\"Offline, using data from idb to update movie preferences\")\n                            dispatch({\n                                type: UPDATE_MOVIE_PREFERENCES,\n                                likedMovies,\n                                dislikedMovies\n                            })\n                        }\n                    })\n                })\n            }\n        }\n    }, [data, loading, likedMovies, dislikedMovies, dispatch])\n    \n    const handleLikeMovie = (likedMovie) => {\n        // update the db\n        likeMovie({\n            variables: { movieId: likedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_LIKED_MOVIES,\n                    movie: likedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'put', likedMovie);\n                idbPromise('dislikedMovies', 'delete', likedMovie);\n\n            } else {\n                console.error(\"Couldn't like the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    const handleDislikeMovie = (dislikedMovie) => {\n        // update the db\n        dislikeMovie({\n            variables: { movieId: dislikedMovie._id }\n        })\n        .then(data => {\n            if (data) {\n                // update global state\n                dispatch({\n                    type: ADD_TO_DISLIKED_MOVIES,\n                    movie: dislikedMovie\n                });\n    \n                // update idb\n                idbPromise('likedMovies', 'delete', dislikedMovie);\n                idbPromise('dislikedMovies', 'put', dislikedMovie);\n\n            } else {\n                console.error(\"Couldn't dislike the movie!\");\n            }\n        })\n        .catch(err => console.error(err));\n    };\n\n    return (\n        <>\n            <Jumbotron fluid className=\"text-light bg-dark\">\n                <Container>\n                    <h1>My Movies</h1>\n                </Container>\n            </Jumbotron>\n            <Container>\n                <h2 className=\"pb-5\">\n                    {likedMovies?.length > 0 \n                    ? `Displaying ${likedMovies.length} saved ${likedMovies.length === 1 ? \"movie\" : \"movies\"}:`\n                    : \"You have no saved movies!\"   \n                    }\n                    \n                </h2>\n                <CardColumns>\n                    {likedMovies?.length\n                    ? likedMovies.map(movie => {\n                        return (\n                            <MovieCard\n                                key={movie._id}\n                                movie={movie}\n                                displayTrailer\n                                likeMovieHandler={handleLikeMovie}\n                                dislikeMovieHandler={handleDislikeMovie}\n                            />\n                        )})\n                    : null}\n                </CardColumns>\n            </Container>\n        </>\n    );\n};\n\nexport default SavedMovies;","import React from 'react';\n\nimport { Container } from 'react-bootstrap';\n\nconst AppFooter = () => {\n    return (\n        <>\n            <Container fluid className=\"text-light page-footer d-flex\">\n                <Container>\n                    <h5 className='pt-4'>Contact Us</h5>\n                    <div className=\"d-lg-flex pb-4 justify-content-between\">\n                        <ul className=\"no-bullets\">\n                            <li><h6>Anita Ganti</h6></li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://anitapeppercorn.github.io/react-portfolio/#/about\">\n                                    <span><i className=\"far fa-folder pr-3\"></i></span>\n                                    https://anitapeppercorn.github.io/react-portfolio\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"mailto:anita_r_ganti@yahoo.com\">\n                                    <span><i className=\"far fa-envelope pr-3\"></i></span>\n                                    anita_r_ganti@yahoo.com\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://github.com/anitapeppercorn\">\n                                    <span><i className=\"fab fa-github pr-3\"></i></span>\n                                    anitapeppercorn\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://www.linkedin.com/in/anita-ganti-9380961/\">\n                                    <span><i className=\"fab fa-linkedin pr-3\"></i></span>\n                                    anita-ganti-9380961\n                                </a>\n                            </li>\n                        </ul>\n                        <ul className=\"no-bullets\">\n                            <li><h6>Priya Ravi</h6></li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://priyaravi23.github.io/react-portfolio/#/about\">\n                                    <span><i className=\"far fa-folder pr-3\"></i></span>\n                                    https://priyaravi23.github.io/react-portfolio/\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"mailto:priyaravi23@gmail.com\">\n                                    <span><i className=\"far fa-envelope pr-3\"></i></span>\n                                    priyaravi23@gmail.com\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://github.com/priyaravi23\">\n                                    <span><i className=\"fab fa-github pr-3\"></i></span>\n                                    priyaravi23\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://www.linkedin.com/in/priya-ravi-4508437b/\">\n                                    <span><i className=\"fab fa-linkedin pr-3\"></i></span>\n                                    priya-ravi-4508437b\n                                </a>\n                            </li>\n                        </ul>\n                        <ul className=\"no-bullets\">\n                            <li><h6>Vanessa Lane</h6></li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://vanessalane.herokuapp.com\">\n                                    <span><i className=\"far fa-folder pr-3\"></i></span>\n                                    https://vanessalane.herokuapp.com\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"mailto:vlane0593@gmail.com\">\n                                    <span><i className=\"far fa-envelope pr-3\"></i></span>\n                                    vlane0593@gmail.com\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://github.com/vanessalane\">\n                                    <span><i className=\"fab fa-github pr-3\"></i></span>\n                                    vanessalane\n                                </a>\n                            </li>\n                            <li>\n                                <a className=\"footer-link\" href=\"https://www.linkedin.com/in/vanessa-lane/\">\n                                    <span><i className=\"fab fa-linkedin pr-3\"></i></span>\n                                    vanessa-lane\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"d-flex justify-content-between\">\n                        <p>© 2020</p>\n                        <p><a className=\"footer-link\" href=\"https://github.com/anitapeppercorn/FANTINDER\"><i className=\"fab fa-github pr-3\"></i>Visit the GitHub Repo</a></p>\n                    </div>\n                </Container>\n            </Container>\n        </>\n    )\n};\nexport default AppFooter;","import React, { useEffect, useReducer } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst fetchCheckoutSession = async ({ quantity }) => {\n  return fetch('/create-checkout-session', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      quantity,\n    }),\n  }).then((res) => res.json());\n};\n\nconst formatPrice = ({ amount, currency, quantity }) => {\n  const numberFormat = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    currencyDisplay: 'symbol',\n  });\n  const parts = numberFormat.formatToParts(amount);\n  let zeroDecimalCurrency = true;\n  for (let part of parts) {\n    if (part.type === 'decimal') {\n      zeroDecimalCurrency = false;\n    }\n  }\n  amount = zeroDecimalCurrency ? amount : amount / 100;\n  const total = (quantity * amount).toFixed(2);\n  return numberFormat.format(total);\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'useEffectUpdate':\n      return {\n        ...state,\n        ...action.payload,\n        price: formatPrice({\n          amount: action.payload.unitAmount,\n          currency: action.payload.currency,\n          quantity: state.quantity,\n        }),\n      };\n    case 'increment':\n      return {\n        ...state,\n        quantity: state.quantity + 1,\n        price: formatPrice({\n          amount: state.unitAmount,\n          currency: state.currency,\n          quantity: state.quantity + 1,\n        }),\n      };\n    case 'decrement':\n      return {\n        ...state,\n        quantity: state.quantity - 1,\n        price: formatPrice({\n          amount: state.unitAmount,\n          currency: state.currency,\n          quantity: state.quantity - 1,\n        }),\n      };\n    case 'setLoading':\n      return { ...state, loading: action.payload.loading };\n    case 'setError':\n      return { ...state, error: action.payload.error };\n    default:\n      throw new Error();\n  }\n}\n\nconst Checkout = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    quantity: 1,\n    price: null,\n    loading: false,\n    error: null,\n    stripe: null,\n  });\n\n  useEffect(() => {\n    async function fetchConfig() {\n      // Fetch config from our backend.\n      const { publicKey, unitAmount, currency } = await fetch(\n        '/config'\n      ).then((res) => res.json());\n      // Make sure to call `loadStripe` outside of a component’s render to avoid\n      // recreating the `Stripe` object on every render.\n      dispatch({\n        type: 'useEffectUpdate',\n        payload: { unitAmount, currency, stripe: await loadStripe(publicKey) },\n      });\n    }\n    fetchConfig();\n  }, []);\n\n  const handleClick = async (event) => {\n    // Call your backend to create the Checkout session.\n    dispatch({ type: 'setLoading', payload: { loading: true } });\n    const { sessionId } = await fetchCheckoutSession({\n      quantity: state.quantity,\n    });\n    // When the customer clicks on the button, redirect them to Checkout.\n    const { error } = await state.stripe.redirectToCheckout({\n      sessionId,\n    });\n    // If `redirectToCheckout` fails due to a browser or network\n    // error, display the localized error message to your customer\n    // using `error.message`.\n    if (error) {\n      dispatch({ type: 'setError', payload: { error } });\n      dispatch({ type: 'setLoading', payload: { loading: false } });\n    }\n  };\n\n  return (\n    <div className=\"sr-root\">\n      <div className=\"sr-main\">\n        <header className=\"sr-header\">\n          <div className=\"sr-header__logo\"></div>\n        </header>\n        <section className=\"container\">\n          <div>\n            <h1>Thank you for considering a donation</h1>\n            <h4>Your donation will be used to plant trees</h4>\n            <div className=\"pasha-image\">\n              <img\n                alt=\"NASA\"\n                src=\"https://eoimages.gsfc.nasa.gov/images/imagerecords/147000/147439/vlmsf_se1_2018_lrg.jpg\"\n                width=\"140\"\n                height=\"160\"\n              />\n            </div>\n          </div>\n          <div className=\"quantity-setter\">\n            <button\n              className=\"increment-btn\"\n              disabled={state.quantity === 1}\n              onClick={() => dispatch({ type: 'decrement' })}\n            >\n              -\n            </button>\n            <input\n              type=\"number\"\n              id=\"quantity-input\"\n              min=\"1\"\n              max=\"10\"\n              value={state.quantity}\n              readOnly\n            />\n            <button\n              className=\"increment-btn\"\n              disabled={state.quantity === 10}\n              onClick={() => dispatch({ type: 'increment' })}\n            >\n              +\n            </button>\n          </div>\n          <p className=\"sr-legal-text\">Number of units in one donation (max 10)</p>\n\n          <button\n            role=\"link\"\n            onClick={handleClick}\n            disabled={!state.stripe || state.loading}\n          >\n            {state.loading || !state.price\n              ? `Loading...`\n              : `Buy for ${state.price}`}\n          </button>\n          <div className=\"sr-field-error\">{state.error?.message}</div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkout;\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n// import custom components\nimport Navbar from './components/Navbar';\nimport Homepage from './pages/Homepage';\nimport SearchMovies from './pages/SearchMovies';\nimport SavedMovies from './pages/SavedMovies';\nimport Footer from './components/Footer';\nimport Checkout from './components/Checkout';\nimport Success from './components/Success';\nimport Canceled from './components/Canceled';\n// import GlobalState Provider\nimport { FantinderProvider } from \"./utils/GlobalState\";\n\n// stylesheets\nimport './App.scss';\n\nconst client = new ApolloClient({\n    request: operation => {\n        const token = localStorage.getItem('id_token');\n\n        operation.setContext({\n            headers: {\n                authorization: token ? `Bearer ${token}` : ''\n            }\n        })\n    },\n    uri: '/graphql'\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <FantinderProvider>\n                    <div className=\"app-container\">\n                        <div className=\"app-content\">\n                            <Navbar />\n                            <Switch>\n                                <Route exact path='/' component={Homepage} />\n                                <Route exact path='/search' component={SearchMovies} />\n                                <Route exact path='/success' component={Success} />\n                                <Route exact path='/canceled' component={Canceled} />\n                                <Route exact path='/checkout' component={Checkout} />                        \n                                <Route exact path='/saved' component={SavedMovies} />\n                                <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n                            </Switch>\n                        </div>\n                    </div>\n                    <Footer />\n                </FantinderProvider>\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}